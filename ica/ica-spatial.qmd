---
title: "Spatial Viz"
number-sections: true
execute: 
  warning: false
fig-env: 'figure'
fig-pos: 'h'
fig-align: center
code-fold: false
---
```{r}
#| eval: false

install.packages(c("sf", "maps", "RColorBrewer", "gplots", "socviz", "leaflet", "devtools"))
devtools::install_github("ropensci/rnaturalearthhires")
```

```{r}
# Load tidyverse package for plotting and wrangling
library(tidyverse)

# Import the data and only keep 2 addresses
energy <- read.csv("https://mac-stat.github.io/data/MacNaturalGas.csv") |> 
  mutate(date = as.Date(paste0(month, "/1/", year), "%m/%d/%Y")) |> 
  filter(address != "c")

# Check it out
head(energy)
```

```{r}
#| eval: false

fave_places <- read.csv("https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv")

# Check it out
head(fave_places)
```

```{r}
# Load the leaflet package
library(leaflet)
```

```{r}
# Load package needed to change color
library(gplots)
```

```{r}
# Import starbucks location data
starbucks <- read.csv("https://mac-stat.github.io/data/starbucks.csv")
```

Let's focus on only those in Minnesota for now:

```{r}
# Don't worry about the syntax
starbucks_mn <- starbucks |>   
  filter(Country == "US", State.Province == "MN")
```

```{r}
# Load the package
library(rnaturalearth)
library(mosaic)

# Get info about country boundaries across the world
# in a "sf" or simple feature format
world_boundaries <- ne_countries(returnclass = "sf")
```


```{r}
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
```

```{r}
starbucks_midwest <- starbucks |> 
  filter(State.Province %in% c("MN", "ND", "SD", "WI"))
```

2.  A background map of state- and county-level boundaries in these states. This requires `st_as_sf()` in the `sf` package, and `map()` in the `maps` package, where the countries are labeled 'minnesota', 'north dakota', etc.

```{r}
# Load packages
library(sf)
library(maps)

# Get the boundaries
midwest_boundaries <- st_as_sf(
  maps::map("county",
            region = c("minnesota", "wisconsin", "north dakota", "south dakota"), 
            fill = TRUE, plot = FALSE))

# Check it out
head(midwest_boundaries)
```

```{r}
# We'll learn this syntax soon! Don't worry about it now.
starbucks_cma <- starbucks |> 
  filter(Country %in% c('CA', 'MX', 'US'))
```

2.  A background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires `ne_states()` in the `rnaturalearth` package where the countries are labeled 'canada', 'mexico', 'united states of america'.

```{r}
cma_boundaries <- ne_states(
  country = c("canada", "mexico", "united states of america"),
  returnclass = "sf")
```

```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

In these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.
Let's wrangle our data first.
We'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):

```{r}
# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))
```

```{r}
# Get the latitude and longitude coordinates of county boundaries
library(socviz)
data(county_map) 

# Check it out
head(county_map)
```


### Example 1 {.unnumbered}

Both addresses used between 0 and 450 therms per month.
There seem to be two types of months -- those with lower use around 50 therms and those with higher use around 300/400 therms.

```{r}
ggplot(energy, aes(x = therms, fill = address)) + 
  geom_density(alpha = 0.5)
```

### Example 2 {.unnumbered}

Energy use is seasonal, with higher usage in winter months.
It seems that address a uses slightly more energy.

```{r}
ggplot(energy, aes(y = therms, x = date, color = address)) + 
  geom_point()
ggplot(energy, aes(y = therms, x = date, color = address)) + 
  geom_line()
```

### Example 3 {.unnumbered}

At both addresses, typical energy use *increased* after renovations.

```{r}
ggplot(energy, aes(y = therms, x = renovated)) + 
  geom_boxplot() + 
  facet_wrap(~ address)

# A density plot isn't very helpful for comparing typical therms in this example!
ggplot(energy, aes(x = therms, fill = renovated)) + 
  geom_density(alpha = 0.5) + 
  facet_wrap(~ address)
```

### Example 4 {.unnumbered}

lurking variable = outdoor temperature (as reflected by hdd)

```{r}
# It happened to be colder outside after renovations (higher hdd)
ggplot(energy, aes(y = hdd, x = renovated)) + 
  geom_boxplot() + 
  facet_wrap(~ address)

# When controlling for outside temps (via hdd), energy use decreased post-renovation
ggplot(energy, aes(y = therms, x = hdd, color = renovated)) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", se = FALSE) + 
  facet_wrap(~ address)
```

### Example 5 {.unnumbered}

BUT this was explained by a *confounding* or *omitted* or *lurking* variable: `hdd` (outdoor temperature)

-   After renovation...
-   *it happened to be colder*...
-   which then leads to higher energy use.

Thus, *when controlling for* outdoor temps, renovations led to *decreased* energy use.

### Exercise 3: Your turn {.unnumbered}

```{r}
leaflet(data = starbucks_mn) |> 
  addTiles() |> 
  addMarkers()
```

### Exercise 3: A simple scatterplot {.unnumbered}

It would be nice to also have some actual reference maps of countries in the background.

```{r}
ggplot(starbucks, aes(y = Latitude, x = Longitude)) + 
  geom_point(size = 0.5)
```

### Exercise 6: A state and county-level map {.unnumbered}

#### Part b {.unnumbered}

Adjust the code below to make the plot!
Remove the `#` to run it.

```{r}
ggplot(midwest_boundaries) +
  geom_sf() +
  geom_point(
    data = starbucks_midwest,
    aes(x = Longitude, y = Latitude),
    alpha = 0.7,
    size = 0.2,
    color = 'darkgreen'
  ) +
  theme_map()
```

### Exercise 7: Contour maps {.unnumbered}

Especially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher *density*.
Consider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:

```{r}
# Point map (we made this earlier)
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_point(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    alpha = 0.3,
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
```

Now check out the contour map.

```{r}
# What changed in the plot?
# What changed in our code?!
ggplot(cma_boundaries) + 
  geom_sf() + 
  geom_density_2d(
    data = starbucks_cma,
    aes(x = Longitude, y = Latitude),
    size = 0.2,
    color = "darkgreen"
  ) +
  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +
  theme_map()
```

### Exercises Part 3: Choropleth maps {.unnumbered}

Spatial data isn't always in the form of point locations!
For example, recall the state and county-level data on presidential elections.

```{r}
elections_by_state <-  read.csv("https://mac-stat.github.io/data/election_2020_by_state.csv")
elections_by_counties <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

In these datasets, we're interested in the overall election outcome by region (state or county), not the specific geographic location of some observation.
Let's wrangle our data first.

We'll focus on just a few variables of interest, and create a new variable (`repub_20_categories`) that *discretizes* the `repub_pct_20` variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):

```{r}
# Don't worry about the code!

elections_by_state <- elections_by_state |> 
  filter(state_abbr != "DC") |> 
  select(state_name, state_abbr, repub_pct_20) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(30, 70, by = 5), 
               labels = c("30-34", "35-39", "40-44", "45-49",
                          "50-54", "55-59", "60-64", "65-70"), 
               include.lowest = TRUE))

elections_by_counties <- elections_by_counties |> 
  select(state_name, state_abbr, county_name, county_fips,
          repub_pct_20, median_age, median_rent) |> 
  mutate(repub_20_categories = 
           cut(repub_pct_20, 
               breaks = seq(0, 100, by = 10),
               labels = c("0-9", "10-19", "20-29", "30-39", "40-49",
                          "50-59", "60-69", "70-79", "80-89", "90-100"),
               include.lowest = TRUE))

# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long
# Don't worry about the syntax
elections_by_counties <- elections_by_counties |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips))
```

### Exercise 8: State-level choropleth maps {.unnumbered}

#### Part d {.unnumbered}

`geom_map()`

### Exercise 10: Play around! {.unnumbered}

```{r}
ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +
  geom_map(map = county_map) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal() + 
  scale_fill_gradientn(name = "median rent", colors = c("white", "lightgreen", "darkgreen"))

ggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +
  geom_map(map = county_map) +
  expand_limits(x = county_map$long, y = county_map$lat) +
  theme_map() +
  theme(legend.position = "right") + 
  coord_equal() + 
  scale_fill_gradientn(name = "median age", colors = terrain.colors(10))
```

